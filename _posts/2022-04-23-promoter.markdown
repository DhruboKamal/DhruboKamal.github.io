---
layout: post
title: Observing local distribution of short sequences in plant's promoter region using python. 
categories: Bioinformatics python
---
## Background:  
In my first month at cBLAST, I was given a task to reproduce figure 1 and figure 2 of ***"Identification of plant promoter constituents by analysis of local distribution of short sequences"*** to enhance my skill. 
From the work of Yamamoto, Y.Y. et al., **LDSS** (Local Distribution of Short Sequences) have been identified within promoters of *Arabidopsis thaliana* and *Oryza Sativa*.[^1]. 

## Patterns of distribution of peaks:
First I used a dictionary of dictionaries where the key of the first dictionary is all possible hexamers. The value against a kmer (hexamer) is another dictionary whose key is distance from TSS (Transcription Start Site) and value is the number of occurrences of that kmer in Oryza Sativa genome. I also created a similar dictionary of dictionaries for average/windowed values of 15 base pairs. Finally, plotted location vs occurrences plot in matplotlib.subplots. Here goes my produced figure and code.

![fig 1](/assets/promoter-output.png)

**Code:** \
First let's import the libraries 
```python
import matplotlib.pyplot as plt
from Bio import SeqIO
import numpy as np

#global variables
ShortSeqLen = 6
```

One utility function I use to find all possible kmers. Let me know if you find any usefull one. Let's also initialize the dictionary.
```python
def AllPossibleKmers(k):
    '''Provides a list of all possible kmers'''
    lst = ['A', 'G','T','C']
    for j in range(k-1):
        lst = lst* 4
        for i in range(0,int(len(lst)/4)):
            lst[i]+='A'
        for i in range(int(len(lst)/4),int(len(lst)/2)):
            lst[i]+='G'
        for i in range(int(len(lst)/2),int(3*len(lst)/4)):
            lst[i]+='T'
        for i in range(int(3*len(lst)/4),int(len(lst))):
            lst[i]+='C'
    return lst

localdistributions = dict()
for kmer in AllPossibleKmers(ShortSeqLen):
    localdistributions[kmer] = dict()
    for i in range(-1000,0,1):
        localdistributions[kmer][i] = 0
```
Updating the dictionary from the genome of Oryza sativa.
```python
fasta_sequences = SeqIO.parse(open('IRGSP-1.0_1kb-upstream_2021-11-11.fasta'),'fasta')
for fasta in fasta_sequences:
    name, promoter = fasta.id, str(fasta.seq)
    # got each promoter
    for i in range (-1000,0-ShortSeqLen+1,1):
        ShortSeq = promoter[1000+i: 1000+i+ShortSeqLen]
        ShortSeq = ShortSeq.upper()
        #print(i,ShortSeq,end='\n ')
        if ShortSeq in localdistributions:
            localdistributions[ShortSeq][i] += 1
        #else:
            #print('ShortSeq is not found in Local Distribution Dictionary')
    
localdistributions_windowed = dict()
for kmer in AllPossibleKmers(ShortSeqLen):
    localdistributions_windowed[kmer] = dict()
    for i in range(-1000+7,0,15):
        sum = 0
        for j in range(i-7,i+8,1):
            if j == -5:
                break
            sum+= localdistributions[kmer][j]
        localdistributions_windowed[kmer][i] = sum/15
```

Ploting the resut
```python
fig, ax = plt.subplots(3,3,sharex=True,figsize=(18, 15))
fig.suptitle("Fig 1. Position From TSS vs occurrence",fontsize=25)
fig.supxlabel('Position From TSS',fontsize=18)
fig.supylabel('No of occurrence',fontsize=18)

ax[0][0].plot(localdistributions['CTCTTC'].keys(),localdistributions['CTCTTC'].values(),color='#B2BEB5')
ax[0][0].plot(localdistributions_windowed['CTCTTC'].keys(),localdistributions_windowed['CTCTTC'].values(),color='#000')
ax[0][0].set_title('CTCTTC')
ax[0][0].set_ylim([0,120])
```


## References:
[^1]: Yamamoto, Y.Y., Ichida, H., Matsui, M. et al. Identification of plant promoter constituents by analysis of local distribution of short sequences. BMC Genomics 8, 67 (2007). [https://doi.org/10.1186/1471-2164-8-67](https://doi.org/10.1186/1471-2164-8-67)
